;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; COM structs and GUIDs needed to do screen capture on Windows using the Desktop Duplication API.

;; This is not intended to be a complete exposure of that API, since such an exposure is not necessary
;; for our purposes.

(in-package #:org.shirakumo.fraf.trial.vr.windows)

(cffi:defcfun (last-error "GetLastError") :uint)


(com-on:define-guid IID-IDXGIOutputDuplication #x191cfac3 #xa341 #x470d #xb2 #x6e #xa8 #x64 #xf4 #x28 #x31 #x9c)
(com-on:define-guid IID-IDXGIOutput1 #x00cddea8 #x939b #x4b83 #xa3 #x40 #xa6 #x85 #x22 #x66 #x66 #xcc)
(com-on:define-guid IID-IDXGIFactory1 #x770aae78 #xf26f #x4dba #xa8 #x29 #x25 #x3c #x83 #xd1 #xb3 #x87)
(com-on:define-guid IID-IDXGIAdapter1 #x29038f61 #x3839 #x4626 #x91 #xfd #x08 #x68 #x79 #x01 #x1a #x05)
(com-on:define-guid IID-IDXGIResource #x035f3ab4 #x482e #x4e50 #xb4 #x1f #x8a #x7f #x8b #xd8 #x96 #x0b)
(com-on:define-guid IID-ID3D11Texture2D #x6f15aaf2 #xd208 #x4e89 #x9a #xb4 #x48 #x95 #x35 #xd3 #x4f #x9c)
(com-on:define-guid IID-ID3D11DeviceContext #xc0bfa96c #xe089 #x44fb #x8e #xaf #x26 #xf8 #x79 #x61 #x90 #xda)
(com-on:define-guid IID-IDXGIDevice #x54ec77fa #x1377 #x44e6 #x8c #x32 #x88 #xfd #x5f #x44 #xc8 #x4c)

(com-on::define-comstruct dxgi-output
  (set-private-data com-on.cffi:hresult (name :pointer) (data-size :uint) (data :pointer))
  (set-private-data-interface com-on.cffi:hresult (name :pointer) (unknown :pointer))
  (private-data com-on.cffi:hresult (name :pointer) (data-size :pointer) (data :pointer))
  (parent com-on.cffi:hresult (riid :pointer) (parent :pointer))
  (description com-on.cffi:hresult (desc :pointer))
  (display-mode-list com-on.cffi:hresult (enum-format :uint) (flags :uint) (num-modes :pointer) (desc :pointer))
  (find-closest-matching-mode com-on.cffi:hresult (mode-to-match :pointer) (closest-match :pointer) (concerned-device :pointer))
  (wait-for-vblank com-on.cffi:hresult)
  (take-ownership com-on.cffi:hresult (device :pointer) (exclusive :bool))
  (release-ownership :void)
  (gamma-control-capabilities com-on.cffi:hresult (gamma-capabilities :pointer))
  (set-gamma-control com-on.cffi:hresult (array :pointer))
  (gamma-control com-on.cffi:hresult (array :pointer))
  (set-display-surface com-on.cffi:hresult (scanout-surface :pointer))
  (display-surface-data com-on.cffi:hresult (destination :pointer))
  (frame-statistics com-on.cffi:hresult (statistics :pointer)))

(com-on::define-comstruct dxgi-output-1
  (set-private-data com-on.cffi:hresult (name :pointer) (data-size :uint) (data :pointer))
  (set-private-data-interface com-on.cffi:hresult (name :pointer) (unknown :pointer))
  (private-data com-on.cffi:hresult (name :pointer) (data-size :pointer) (data :pointer))
  (parent com-on.cffi:hresult (riid :pointer) (parent :pointer))
  (description com-on.cffi:hresult (desc :pointer))
  (display-mode-list com-on.cffi:hresult (enum-format :uint) (flags :uint) (num-modes :pointer) (desc :pointer))
  (find-closest-matching-mode com-on.cffi:hresult (mode-to-match :pointer) (closest-match :pointer) (concerned-device :pointer))
  (wait-for-vblank com-on.cffi:hresult)
  (take-ownership com-on.cffi:hresult (device :pointer) (exclusive :bool))
  (release-ownership :void)
  (gamma-control-capabilities com-on.cffi:hresult (gamma-capabilities :pointer))
  (set-gamma-control com-on.cffi:hresult (array :pointer))
  (gamma-control com-on.cffi:hresult (array :pointer))
  (set-display-surface com-on.cffi:hresult (scanout-surface :pointer))
  (display-surface-data com-on.cffi:hresult (destination :pointer))
  (frame-statistics com-on.cffi:hresult (statistics :pointer))
  (display-mode-list-1 com-on.cffi:hresult (enum-format :uint) (flags :uint) (num-modes :pointer) (desc :pointer))
  (find-closest-matching-model-1 com-on.cffi:hresult (mode-to-match :pointer) (closest-match :pointer) (concerned-device :pointer))
  (display-surface-data-1 com-on.cffi:hresult (destination :pointer)) 
  (duplicate-output com-on.cffi:hresult (device :pointer) (output-duplication :pointer)))

(cffi:defcenum dxgi-result
  (:ok 0)
  (:error-access-lost #x887a0026)
  (:error-wait-timeout #x887a0027)
  (:error-invalid-call #x887a0001))

(com-on::define-comstruct dxgi-output-duplication 
  (set-private-data com-on.cffi:hresult (name :pointer) (data-size :uint) (data :pointer))
  (set-private-data-interface com-on.cffi:hresult (name :pointer) (unknown :pointer))
  (private-data com-on.cffi:hresult (name :pointer) (data-size :pointer) (data :pointer))
  (parent com-on.cffi:hresult (riid :pointer) (parent :pointer))
  (description :void (desc :pointer))
  (acquire-next-frame dxgi-result (timeout-in-milliseconds :uint) (frame-info :pointer) (desktop-resource :pointer))
  (frame-dirty-rects com-on.cffi:hresult (dirty-rects-buffer-size :uint) (dirty-rects-buffer :pointer) (dirty-rects-buffer-size-required :pointer))
  (frame-move-rects com-on.cffi:hresult (move-rects-buffer-size :uint) (move-rect-buffer :pointer) (move-rects-buffer-size-required :pointer))
  (frame-pointer-shape com-on.cffi:hresult (pointer-shape-buffer-size :uint) (shape-buffer :pointer) (shape-buffer-size-required :pointer) (pointer-shape-info :pointer))
  (map-desktop-surface com-on.cffi:hresult (locked-rect :pointer))
  (unmap-desktop-surface com-on.cffi:hresult)
  (release-frame com-on.cffi:hresult))

(cffi:defcfun (%create-dxgi-factory-1 "CreateDXGIFactory1") com-on.cffi:hresult
  (riid :pointer) (factory :pointer))

(defun create-dxgi-factory-1 ()
  (cffi:with-foreign-objects (;(foreign-guid '(:struct com-on::guid))
                              (foreign-pointer :pointer))
    (com-on::check-return (%create-dxgi-factory-1 iid-idxgifactory1 foreign-pointer))
    (cffi:mem-ref foreign-pointer :pointer))) ; works

(com-on::define-comstruct dxgi-factory-1
  (set-private-data com-on.cffi:hresult (name :pointer) (data-size :uint) (data :pointer))
  (set-private-data-interface com-on.cffi:hresult (name :pointer) (unknown :pointer))
  (private-data com-on.cffi:hresult (name :pointer) (data-size :pointer) (data :pointer))
  (parent com-on.cffi:hresult (riid :pointer) (parent :pointer))
  (enum-adapters com-on.cffi:hresult (adapter-index :uint) (adapter :pointer))
  (make-window-association com-on.cffi:hresult (hwnd :pointer) (flags :uint))
  (window-association com-on.cffi:hresult (window :pointer))
  (create-swap-chain com-on.cffi:hresult (device :pointer) (desc :pointer) (swap-chain :pointer))
  (create-software-adapter com-on.cffi:hresult (module :pointer) (adapter :pointer))
  (enum-adapters-1 com-on.cffi:hresult (adapter-index :uint) (adapter :pointer))
  (current-p :bool))

(com-on::define-comstruct dxgi-adapter
  (set-private-data com-on.cffi:hresult (name :pointer) (data-size :uint) (data :pointer))
  (set-private-data-interface com-on.cffi:hresult (name :pointer) (unknown :pointer))
  (private-data com-on.cffi:hresult (name :pointer) (data-size :pointer) (data :pointer))
  (parent com-on.cffi:hresult (riid :pointer) (parent :pointer))
  (enum-outputs com-on.cffi:hresult (output-index :uint) (output :pointer))
  (description com-on.cffi:hresult (description :pointer))
  (check-interface-support com-on.cffi:hresult (interface-name :pointer) (umd-version :pointer)))

(com-on::define-comstruct dxgi-adapter-1
  (set-private-data com-on.cffi:hresult (name :pointer) (data-size :uint) (data :pointer))
  (set-private-data-interface com-on.cffi:hresult (name :pointer) (unknown :pointer))
  (private-data com-on.cffi:hresult (name :pointer) (data-size :pointer) (data :pointer))
  (parent com-on.cffi:hresult (riid :pointer) (parent :pointer))
  (enum-outputs com-on.cffi:hresult (output-index :uint) (output :pointer))
  (description com-on.cffi:hresult (description :pointer))
  (check-interface-support com-on.cffi:hresult (interface-name :pointer) (umd-version :pointer))
  (description-1 com-on.cffi:hresult (description :pointer)))

(com-on::define-comstruct d3d-11-device-context
;;;;;;;;;;;;;
  (device :void (device :pointer))
  (private-data com-on.cffi:hresult (guid :pointer) (data-size :pointer) (data :pointer))
  (set-private-data com-on.cffi:hresult (guid :pointer) (data-size :uint) (data :pointer))
  (set-private-data-interface com-on.cffi:hresult (guid :pointer) (data :pointer))
  (set-vconstant-buffers :void (start-slot :uint) (num-buffers :uint) (constant-buffers :pointer))
  (set-pshader-resources :void (start-slot :uint) (num-views :uint) (shader-resource-views :pointer))
  (set-pshader :void (pixel-shader :pointer) (class-instances :pointer) (num-class-instances :uint))
  (set-psamplers :void (start-slot :uint) (num-samplers :uint) (samplers :pointer))
  (set-vshader :void (vertex-shader :pointer) (class-instances :pointer) (num-class-instances :uint))
  (draw-indexed :void (index-count :uint) (start-index-location :uint) (base-vertex-location :int))
  (draw :void (vertex-count :uint) (start-vertex-location :uint))
  (map com-on.cffi:hresult (resource :pointer) (subresource :uint) (map-type :pointer) (map-flags :uint) (mapped-resource :pointer))
  (unmap :void (resource :pointer) (subresource :uint))
  (set-pconstant-buffers (start-slot :uint) (num-buffers :uint) (constant-buffers :pointer))
  (set-iainput-layout :void (input-layout :pointer))
  (set-iavertex-buffers :void (start-slot :uint) (num-buffers :uint) (vertex-buffers :pointer) (strides :pointer) (offsets :pointer))
  (set-ia-index-buffer :void (index-buffer :pointer) (format :pointer) (offset :uint))
  (draw-indexed-instanced :void (index-count-per-instance :uint) (instance-count :uint) (start-index-location :uint) (base-vertex-location :int) (start-instance-location :uint))
  (draw-instanced :void (vertex-count-per-instance :uint) (instance-count :uint) (start-vertex-location :uint) (start-instance-location :uint))
  (set-gconstant-buffers :void (start-slot :uint) (num-buffers :uint) (constant-buffers :pointer))
  (set-gshader :void (shader :pointer) (class-instances :pointer) (num-class-instances :uint))
  (set-ia-primitive-topology :void (topology :pointer))
  (set-vshader-resources (start-slot :uint) (num-views :uint) (shader-resource-views :pointer))
  (set-vsamplers (start-slot :uint) (num-samplers :uint) (samplers :pointer))
  (begin :void (async :pointer))
  (end :void (async :pointer))
  (data com-on.cffi:hresult (async :pointer) (data :pointer) (data-size :uint) (data-flags :uint))
  (set-predication :void (predicate :pointer) (predicate-value :bool))
  (set-shader-resources :void (start-slot :uint) (num-views :uint) (shader-resource-views :pointer))
  (set-gsamplers :void (start-slot :uint) (num-samplers :uint) (samplers :pointer) )
  (set-omrender-targets :void (num-views :uint) (render-target-views :pointer) (depth-stencil-view :pointer))
  (set-omrender-targets-and-unordered-access-views :void (num-rtvs :uint) (render-target-views :pointer) (depth-stencil-view :pointer) (start-slot :uint) (num-uavs :uint) (unordered-access-views :pointer) (initial-counts :pointer))
  (set-omblend-state :void (blend-state :pointer) (blend-factor :pointer) (sample-mask :uint))
  (set-omdepth-stencil-state :void (depth-stencil-state :pointer) (stencil-ref :uint))
  (set-sotargets :void (num-buffers :uint) (so-targets :pointer) (offsets :pointer))
  (draw-auto :void)
  (draw-indexed-instanced-indirect :void (buffer-for-args :pointer) (aligned-byte-offset-for-args :uint))
  (draw-instanced-indirect :void (buffer-for-args :pointer) (aligned-byte-offset-for-args :uint))
  (dispatch :void (count-x :uint) (count-y :uint) (count-z :uint))
  (dispatch-indirect :void (buffer-for-args :pointer) (aligned-byte-offset-for-args :uint))
  (set-rsstate :void (rasterizer-state :pointer))
  (set-rsviewports :void (num-viewports :uint) (viewports :pointer))
  (set-rsscissor-rects :void (num-rects :uint) (rects :pointer))
  (copy-subresource-region :void (destination-resource :pointer) (destination-subresource :uint) (destination-x :uint) (destination-y :uint) (destination-z :uint) (source-resource :pointer) (source-subresource :uint)
                           (source-box :pointer))
  (copy-resource :void (destination-resource :pointer) (source-resource :pointer)))
  


(cffi:defcenum feature-level
  (:9-1 #x9100)
  (:9-2 #x9200)
  (:9-3 #x9300)
  (:10-0 #xa000)
  (:10-1 #xa100)
  (:11-0 #xb000)
  (:11-1 #xb100)
  (:12-0 #xc000)
  (:12-1 #xc100))

(cffi:defbitfield create-bitfield-flag
  (:single-threaded #x1)
  (:debug #x2)
  (:switch-to-ref #x4)
  (:prevent-internal-threading-optimizations #x8)
  (:bgra-support #x20)
  (:debuggable #x40)
  (:prevent-altering-layer-settings-from-registry #x80)
  (:disable-gpu-timeout #x100)
  (:video-support #x800))

(cffi:defcenum d3d-result
  (:file-not-found #x887c0002)
  (:too-many-unique-state-objects #x887c0001)
  (:too-many-unique-view-objects #x887c0003)
  (:deferred-context-map-without-initial-discard #x887c0004)
  (:invalid-call #x887a0001)
  (:was-still-drawing #x887a000a)
  (:fail #x80004005)
  (:invalid-arg #x80070057)
  (:out-of-memory #x8007000e)
  (:notimpl #x80004001)
  (:unsupported #x887a0004)
  (:false #x1)
  (:ok 0))
(cffi:defcenum d3d-driver-type
  (:unknown 0)
  (:hardware 1)
  (:reference 2)
  (:null 3)
  (:software 4)
  (:warp 5))
(cffi:defcfun (%d3d11-create-device "D3D11CreateDevice") d3d-result
  (dxgi-adapter :pointer)
  (driver-type d3d-driver-type)
  (hmodule :pointer)
  (flags create-bitfield-flag)
  (feature-levels-pointer :pointer)
  (feature-levels-count :uint)
  (sdk-version :uint)
  (d3d11-device :pointer)
  (feature-level-pointer :pointer)
  (device-context-pointer :pointer))
(com-on::define-comstruct dxgi-resource
  (set-private-data com-on.cffi:hresult (name :pointer) (data-size :uint) (data :pointer))
  (set-private-data-interface com-on.cffi:hresult (name :pointer) (unknown :pointer))
  (private-data com-on.cffi:hresult (name :pointer) (data-size :pointer) (data :pointer))
  (parent com-on.cffi:hresult (riid :pointer) (parent :pointer))
  (device com-on.cffi:hresult (rrid :pointer) (device :pointer))
  (shared-handle com-on.cffi:hresult (shared-handle :pointer))
  (usage com-on.cffi:hresult (usage :pointer))
  (set-eviction-priority com-on.cffi:hresult (eviction-priority :uint))
  (eviction-priority com-on.cffi:hresult (eviction-priority :pointer)))

(com-on::define-comstruct d3d-11-texture-2d
  (device :void (device :pointer))
  (private-data com-on.cffi:hresult (name :pointer) (data-size :pointer) (data :pointer))
  (set-private-data com-on.cffi:hresult (name :pointer) (data-size :uint) (data :pointer))
  (set-private-data-interface com-on.cffi:hresult (name :pointer) (unknown :pointer))
  (type :void (resource-dimension :pointer))
  (set-eviction-priority com-on.cffi:hresult (eviction-priority :uint))
  (eviction-priority com-on.cffi:hresult (eviction-priority :pointer))
  (description :void (description :pointer)))

(cffi:defcstruct dxgi-sample
  (count :uint)
  (quality :uint))

(defmethod cffi:translate-into-foreign-memory ((value list) (type dxgi-sample-tclass) pointer)
  (cffi:with-foreign-slots ((count quality) pointer (:struct dxgi-sample))
    (setf count (first value)
          quality (second value))))

(cffi:defcstruct d3d-11-texture-2d-description
  (width :uint)
  (height :uint)
  (mip-levels :uint)
  (array-size :uint)
  (format :uint)
  (sample (:struct dxgi-sample))
  (usage :uint)
  (bind-flags :uint)
  (cpu-access-flags :uint)
  (misc-flags :uint))


(com-on::define-comstruct d3d-11-device
  (create-buffer com-on.cffi:hresult (desc :pointer) (initial-data :pointer) (buffer :pointer))
  (create-texture-1d com-on.cffi:hresult (desc :pointer) (initial-data :pointer) (texture-1d :pointer))
  (create-texture-2d com-on.cffi:hresult (desc :pointer) (initial-data :pointer) (texture-2d :pointer)))

(com-on::define-comstruct dxgi-device
  (set-private-data com-on.cffi:hresult (name :pointer) (data-size :uint) (data :pointer))
  (set-private-data-interface com-on.cffi:hresult (name :pointer) (unknown :pointer))
  (private-data com-on.cffi:hresult (name :pointer) (data-size :pointer) (data :pointer))
  (parent com-on.cffi:hresult (riid :pointer) (parent :pointer))
  (adapter com-on.cffi:hresult (adapter :pointer))
  (create-surface com-on.cffi:hresult (desc :pointer) (shared-resource :pointer) (surface :pointer))
  (query-resource-residency com-on.cffi:hresult (resources :pointer) (residency-status :pointer))
  (set-gpu-thread-priority com-on.cffi:hresult (priority :int))
  (gpu-thread-priority com-on.cffi:hresult (priority :pointer)))
